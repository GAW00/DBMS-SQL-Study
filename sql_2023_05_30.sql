SELECT NAME, PROFNO FROM STUDENT;
SELECT NAME, PROFNO FROM PROFESSOR;

SELECT DEPTNO,
       PROFNO,
       NAME
FROM PROFESSOR;




SELECT E.DEPTNO,
       D.DNAME,
       E.SAL -- ALIAS(별명) 사용해야 조회
FROM(
-- 조회 결과를 하나의 테이블로 봄(인라인(INLINE) 뷰)
SELECT DEPTNO,
       MAX(SAL) "SAL"
FROM EMP
GROUP BY DEPTNO) E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;




-- V_EMP2 : 테이블 2개 이상으로 만든 뷰(COMPLEX VIEW)
SELECT * FROM V_EMP2;

CREATE OR REPLACE VIEW V_EMP2
AS
SELECT E.ENAME,
       D.DNAME
FROM EMP E,
     DEPT D
WHERE E.DEPTNO = D.DEPTNO;



-- 오류 : ORA-01702: a view is not appropriate here
-- 뷰에는 인덱스 생성 불가
CREATE INDEX IDX_V_EMP1_ENAME
ON V_EMP1(ENAME);


SELECT * FROM V_EMP1;
ROLLBACK;

CREATE OR REPLACE VIEW V_EMP1 -- 뷰가 존재하면 변경, 뷰가 존재하지 않으면 생성(ROLLBACK 취소 안됨)
AS
SELECT EMPNO,
       ENAME,
       HIREDATE
FROM EMP;



DROP VIEW V_EMP1;  -- 뷰 삭제

CREATE VIEW V_EMP1 -- 뷰 생성
AS
SELECT EMPNO,
       ENAME
FROM EMP;



-- V_EMP1 : 단순 뷰(SIMPLE VIEW) -> 테이블 1개로 뷰 생성
SELECT * FROM V_EMP1;


-- 오류 -> ORA-01031: insufficient privileges
--  system 계정에서 뷰 생성 권한 부여
-- SQL> GRANT CREATE VIEW TO scott;
CREATE VIEW V_EMP1
AS
SELECT EMPNO,
       ENAME,
       HIREDATE
FROM EMP;




-- SELF JOIN : 자기 자산의 테이블을 조인
SELECT E1.EMPNO ENO,
       E1.ENAME ENAME,
       E2.EMPNO MGRNO,
       E2.ENAME MGR_NAME
FROM EMP E1,
     EMP E2
WHERE E1.MGR = E2.EMPNO;




SELECT * FROM EMP;
-- Q. SMITH의 상관은?
-- MGR(7902)가 EMPNO인 사람 => FORD




-- 27행(20, 16 => 27)
SELECT S.NAME STU_NAME,
       P.NAME PROF_NAME
FROM STUDENT S FULL JOIN PROFESSOR P -- FULL (OUTER) JOIN
ON S.PROFNO = P.PROFNO;


SELECT S.NAME STU_NAME,
       P.NAME PROFNAME
  FROM STUDENT S RIGHT JOIN PROFESSOR P -- RIGHT (OUTER) JOIN
    ON S.PROFNO = P.PROFNO;


-- 22행(20, 16 => 22)
SELECT S.NAME STU_NAME,
       P.NAME PROFNAME
  FROM STUDENT S,
       PROFESSOR P
 WHERE S.PROFNO(+) = P.PROFNO;


-- ANSI JOIN
SELECT S.NAME STU_NAME,
       P.NAME PROFNAME
  FROM STUDENT S LEFT JOIN PROFESSOR P -- LEFT (OUTER) JOIN
    ON S.PROFNO = P.PROFNO;


-- (INNER) JOIN = 등가(EQUI)조인 : S.PROFNO = P.PROFNO
-- OUTER JOIN : LEFT JOIN + RIGHT JOIN => S.PROFNO = P.PROFNO(+)
-- LEFT JOIN
-- (+)표시 테이블 반대 테이블의 정보 모두 출력
-- OUTER JOIN : 학생테이블의 교수번호 NULL 인 5행도 표시
-- 20행 (+) 사용
SELECT S.NAME STU_NAME,
       P.NAME PROFNAME
  FROM STUDENT S,
       PROFESSOR P
 WHERE S.PROFNO = P.PROFNO(+);


-- Q. NULL이 있는 행들도 출력하고 싶으면?
-- 15행(20, 16 => 15) 학생테이블의 교수번호 NULL 이 5행
SELECT S.NAME STU_NAME,
       P.NAME PROFNAME
  FROM STUDENT S,
       PROFESSOR P
 WHERE S.PROFNO = P.PROFNO;

-- 20행
SELECT * FROM STUDENT;

-- 16행
SELECT * FROM PROFESSOR;



------------------------------------



SELECT * FROM STUDENT;
SELECT * FROM DEPARTMENT;
SELECT * FROM HAKJUM;
SELECT * FROM SCORE;
SELECT * FROM EMP;
SELECT * FROM EMP2;
SELECT * FROM P_GRADE;
SELECT * FROM CUSTOMER;
SELECT * FROM GIFT;
SELECT * FROM PROFESSOR;
SELECT * FROM DEPT;
-- 실습문제 9장-5
SELECT D.DNAME,
       S.MAX_HEIGHT,
       S.MAX_HEIGHT "HEIGHT",
       S1. NAME
FROM(
SELECT DEPTNO1,
       MAX(HEIGHT) MAX_HEIGHT
FROM STUDENT
GROUP BY DEPTNO1) S, DEPARTMENT D, STUDENT S1
WHERE S.DEPTNO1 = D.DEPTNO AND S1.DEPTNO1 = S.DEPTNO1;


SELECT D.DNAME,
       A.MAX_HEIGHT,
       S.NAME,
       S.HEIGHT
FROM(
SELECT DEPTNO1,
       MAX(HEIGHT) MAX_HEIGHT
FROM STUDENT
GROUP BY DEPTNO1) A, DEPARTMENT D, STUDENT S
WHERE S.DEPTNO1 = A.DEPTNO1 AND S.HEIGHT = A.MAX_HEIGHT AND S.DEPTNO1 = D.DEPTNO;





-- 실습문제 9장-4
SELECT D.DNAME,
       S.MAX_HEIGHT,
       S.MAX_WEIGHT
FROM(
SELECT DEPTNO1,
       MAX(HEIGHT) MAX_HEIGHT,
       MAX(WEIGHT) MAX_WEIGHT
FROM STUDENT
GROUP BY DEPTNO1) S, DEPARTMENT D
WHERE S.DEPTNO1 = D.DEPTNO ;






-- 실습문제 9장-3
CREATE OR REPLACE VIEW v_prof_dept
AS
SELECT P.PROFNO 교수번호,
       P.NAME 교수명,
       D.DNAME 소속학과명
FROM PROFESSOR P JOIN DEPARTMENT D
ON P.DEPTNO = D.DEPTNO;


CREATE OR REPLACE VIEW v_prof_dept
AS
SELECT P.PROFNO 교수번호,
       P.NAME 교수명,
       D.DNAME 소속학과명
FROM PROFESSOR P, DEPARTMENT D
WHERE P.DEPTNO = D.DEPTNO;


SELECT * FROM V_PROF_DEPT;



-- 실습문제 9장-2
SELECT DECODE(rn1,1,DEPTNO) col1
      , PROFNO col2
      , NAME
FROM (
SELECT DEPTNO, PROFNO, NAME
      , ROW_NUMBER() OVER(PARTITION BY DEPTNO ORDER BY PROFNO, NAME) rn1
FROM PROFESSOR);


SELECT DECODE(LAG(DEPTNO) OVER (ORDER BY DEPTNO), DEPTNO, NULL, DEPTNO) DEPTNO
     , PROFNO
     , NAME
FROM PROFESSOR;


SELECT DECODE(DEPTNO, NDEPTNO, NULL, DEPTNO) DEPTNO,
       PROFNO,
       NAME
FROM(
-- 인라인 뷰
SELECT LAG(DEPTNO) OVER (ORDER BY DEPTNO) NDEPTNO,
       DEPTNO,
       PROFNO,
       NAME
FROM PROFESSOR);



-- 실습문제 9장-1
SELECT E.DEPTNO,
       D.DNAME,
       E.SAL
FROM(
SELECT DEPTNO,
       MAX(SAL) "SAL"
FROM EMP
GROUP BY DEPTNO) E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;

SELECT DEPTNO,
       MAX(SAL) "SAL"
FROM EMP
GROUP BY DEPTNO;




-- 실습문제 8장-A6
SELECT E1.EMPNO,
       E1.ENAME,
       E1.HIREDATE HIREDATE,
       COUNT(E2.HIREDATE) COUNT
FROM EMP E1 LEFT JOIN EMP E2
ON E1.HIREDATE > E2.HIREDATE
GROUP BY E1.EMPNO, E1.ENAME, E1.HIREDATE
ORDER BY HIREDATE;
       

SELECT E1.EMPNO,
       E1.ENAME,
       E1.HIREDATE HIREDATE,
       COUNT(E2.HIREDATE) COUNT
FROM EMP E1, EMP E2
WHERE E1.HIREDATE > E2.HIREDATE(+)
GROUP BY E1.EMPNO, E1.ENAME, E1.HIREDATE
ORDER BY HIREDATE;





-- 실습문제 8장-A5
SELECT P1.PROFNO,
       P1.NAME,
       TO_CHAR(P1.HIREDATE, 'YYYY/MM/DD') HIREDATE,
       COUNT(P2.HIREDATE) COUNT
FROM PROFESSOR P1 LEFT JOIN PROFESSOR P2
ON P1.HIREDATE > P2.HIREDATE
GROUP BY P1.PROFNO, P1.NAME, P1.HIREDATE
ORDER BY HIREDATE;


SELECT P1.PROFNO,
       P1.NAME,
       TO_CHAR(P1.HIREDATE, 'YYYY/MM/DD') HIREDATE,
       COUNT(P2.HIREDATE) COUNT
FROM PROFESSOR P1, PROFESSOR P2
WHERE P1.HIREDATE > P2.HIREDATE(+)
GROUP BY P1.PROFNO, P1.NAME, P1.HIREDATE
ORDER BY HIREDATE;





-- 실습문제 8장-A4
SELECT C.GNAME "CUST_NAME",
       C.POINT,
       G.GNAME "GIFT_NAME"
FROM CUSTOMER C JOIN GIFT G
ON C.POINT > G.G_START AND G.GNAME = 'Notebook';






-- 실습문제 8장-A3
SELECT E.NAME,
       E.BIRTHDAY,
       TRUNC(MONTHS_BETWEEN(SYSDATE,  E.BIRTHDAY) / 12 - 1) "AGE",
       E.POSITION "CURR_POSITION",
       P.POSITION "BE_POSITION"
FROM EMP2 E LEFT JOIN P_GRADE P
ON TRUNC((SYSDATE - E.BIRTHDAY) / 365) BETWEEN P.S_AGE AND P.E_AGE;


SELECT E.NAME,
       E.BIRTHDAY,
       TRUNC(MONTHS_BETWEEN(SYSDATE,  E.BIRTHDAY) / 12 - 1) "AGE",
       E.POSITION "CURR_POSITION",
       P.POSITION "BE_POSITION"
FROM EMP2 E, P_GRADE P
WHERE TRUNC((SYSDATE - E.BIRTHDAY) / 365) BETWEEN P.S_AGE AND P.E_AGE;





-- 실습문제 8장-A2
SELECT E.NAME,
       E.POSITION,
       TO_CHAR(E.PAY, '999,999,999') "PAY",
       TO_CHAR(P.S_PAY, '999,999,999') "Low PAY",
       TO_CHAR(P.E_PAY, '999,999,999') "High PAY"
FROM EMP2 E JOIN P_GRADE P
ON E.POSITION = P.POSITION;


SELECT E.NAME,
       E.POSITION,
       TO_CHAR(E.PAY, '999,999,999') "PAY",
       TO_CHAR(P.S_PAY, '999,999,999') "Low PAY",
       TO_CHAR(P.E_PAY, '999,999,999') "High PAY"
FROM EMP2 E, P_GRADE P
WHERE E.POSITION = P.POSITION;





-- 실습문제 8장-A1
SELECT S.NAME STU_NAME,
       S.DEPTNO1,
       D.DNAME DEPT_NAME
FROM STUDENT S JOIN DEPARTMENT D
ON S.DEPTNO1 = D.DEPTNO
ORDER BY S.STUDNO;


SELECT S.NAME STU_NAME,
       S.DEPTNO1,
       D.DNAME DEPT_NAME
FROM STUDENT S, DEPARTMENT D
WHERE S.DEPTNO1 = D.DEPTNO
ORDER BY S.STUDNO;




-- 실습문제 8장-7
SELECT E1.EMPNO ENO,
       E1.ENAME ENAME,
       E2.MGR MGRNO,
       E2.ENAME  MGR_NAME
FROM EMP E1 JOIN EMP E2
ON E1.EMPNO = E2.MGR;


SELECT E1.EMPNO ENO,
       E1.ENAME ENAME,
       E2.EMPNO MGRNO,
       E2.ENAME MGR_NAME
FROM EMP E1,
     EMP E2
WHERE E1.MGR = E2.EMPNO;





-- 실습문제 8장-6
SELECT S.NAME STU_NAME,
       P.NAME PROF_NAME
FROM STUDENT S FULL JOIN PROFESSOR P -- FULL (OUTER) JOIN
ON S.PROFNO = P.PROFNO;


SELECT S.NAME STU_NAME,
       P.NAME PROFNAME
  FROM STUDENT S,
       PROFESSOR P
 WHERE S.PROFNO = P.PROFNO(+)
 UNION
 SELECT S.NAME STU_NAME,
       P.NAME PROFNAME
  FROM STUDENT S,
       PROFESSOR P
 WHERE S.PROFNO(+) = P.PROFNO;





-- 실습문제 8장-5
SELECT ST.NAME STU_NAME,
       SC.TOTAL SCORE,
       H.GRADE CREDIT
FROM STUDENT ST JOIN SCORE SC
                ON ST.STUDNO = SC.STUDNO
                JOIN HAKJUM H
                ON SC.TOTAL BETWEEN H.MIN_POINT AND MAX_POINT;
                
SELECT ST.NAME STU_NAME,
       SC.TOTAL SCORE,
       H.GRADE CREDIT
FROM STUDENT ST,
     SCORE SC,
     HAKJUM H
WHERE ST.STUDNO = SC.STUDNO
      AND SC.TOTAL >= H.MIN_POINT
      AND SC.TOTAL <= H.MAX_POINT;


SELECT S.NAME STU_NAME
     , D.DNAME DEPT_NAME
     , P.NAME PROF_NAME
FROM STUDENT S JOIN PROFESSOR P
               ON S.PROFNO = P.PROFNO
               JOIN DEPARTMENT D
               ON P.DEPTNO = D.DEPTNO
ORDER BY D.DNAME;