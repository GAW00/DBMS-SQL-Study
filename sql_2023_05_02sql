
SELECT * FROM PANMAE
ORDER BY P_STORE;



SELECT EMPNO
     , ENAME
     , SAL
--   RANK() : 값이 같은 튜플이 있으면 개수 만큼 건너뜀 EX> 9등, 9등 두명 있으면 다음은 11등
     , RANK() OVER(ORDER BY SAL DESC) "RANK"
--   DENSE_RANK() : 값이 같은 튜플이 있으면 개수 만큼 건너뛰지 않음 EX> 9등, 9등 두명 있어도 다음은 10등 
     , DENSE_RANK() OVER(ORDER BY SAL DESC) "DENSE_RANK"
--   ROW_NUMBER() : 튜플(행)의 번호
     , ROW_NUMBER() OVER(ORDER BY SAL DESC) "ROW_NUMBER"
FROM EMP;


SELECT EMPNO
     , ENAME
     , SAL
--   , RANK() OVER() : 전체 순위(3, 3 다음 5)
--   , RANK() OVER(ORDER BY SAL) "RANK_ASC"
     , RANK() OVER(ORDER BY SAL DESC) "RANK_DESC"
FROM EMP;



-- ENAME 기준으로 SMITH의 순위
SELECT RANK('SMITH')WITHIN GROUP(ORDER BY ENAME) "RANK"
--     , RANK('SMITH')WITHIN GROUP(ORDER BY HIREDATE) "RANK" -- 오류 : HIREDATE 속성 도메인에 'SMITH'는 포함되지 않음 
FROM EMP
ORDER BY ENAME;

SELECT ENAME
FROM EMP
ORDER BY ENAME;


SELECT ENAME
     , HIREDATE
     , SAL
--   LEAD(A, B, C) : A = 컬럼명, B = 몇번째 이후 행, C = 없을때 값(값 안 주면 NULL)
     , LEAD(SAL, 1, 0)OVER(ORDER BY HIREDATE) LEAD
     , LEAD(SAL, 2, 0)OVER(ORDER BY HIREDATE) LEAD
     , LEAD(SAL, 2, 888)OVER(ORDER BY HIREDATE) LEAD
     , LEAD(SAL, 2, 0)OVER(ORDER BY HIREDATE) LEAD
     , LEAD(SAL, 2)OVER(ORDER BY HIREDATE) LEAD
--   ,1이 생략
     , LEAD(SAL)OVER(ORDER BY HIREDATE) LEAD
FROM EMP;


SELECT ENAME
     , HIREDATE
     , SAL
--   LAG(A, B, C) : A = 컬럼명, B = 몇번째 이전행, C = 없을때 값(값 안 주면 NULL)
     , LAG(SAL, 1, 0)OVER(ORDER BY HIREDATE) LAG
     , LAG(SAL, 2, 0)OVER(ORDER BY HIREDATE) LAG
     , LAG(SAL, 2, 777)OVER(ORDER BY HIREDATE) LAG
     , LAG(SAL, 2)OVER(ORDER BY HIREDATE) LAG
--   1 생략
     , LAG(SAL)OVER(ORDER BY HIREDATE) LAG
FROM EMP;

SELECT * FROM EMP
ORDER BY DEPTNO, JOB;



-----------------------------------------------------------------



SELECT * FROM PROFESSOR;
SELECT * FROM CUSTOMER;
SELECT * FROM MEMBER;
SELECT * FROM STUDENT;
SELECT * FROM CAL;
SELECT * FROM EMP;
SELECT * FROM PANMAE;
--실습문제 3장-9
SELECT P_CODE
     , P_STORE
     , P_QTY
     , SUM(P_QTY) OVER() "TOTAL_QTY"
     , ROUND(P_QTY / (SUM(P_QTY) OVER()) * 100, 2) "QTY_%"
--     RATIO_TO_REPORT() : P_QTY 값의 전체 SUM 대비 비율
     , ROUND(RATIO_TO_REPORT(P_QTY) OVER() * 100, 2) "QTY_%"
FROM PANMAE
GROUP BY P_CODE, P_STORE, P_QTY
HAVING P_CODE = 100;




--실습문제 3장-8
SELECT P_CODE
     , P_STORE
     , P_DATE
     , P_QTY
     , P_TOTAL
     , SUM(P_TOTAL) OVER(PARTITION BY P_CODE, P_STORE ORDER BY P_DATE) TOTAL
FROM PANMAE;



--실습문제 3장-7
SELECT P_DATE
     , P_CODE
     , P_QTY
     , P_TOTAL
     , SUM(P_TOTAL) OVER(PARTITION BY P_CODE ORDER BY P_TOTAL) TOTAL
FROM PANMAE
WHERE P_STORE = 1000;





--실습문제 3장-6
SELECT P_DATE
     , P_CODE
     , P_QTY
     , P_TOTAL
     , SUM(P_TOTAL) OVER(ORDER BY P_TOTAL) TOTAL
FROM PANMAE
WHERE P_STORE = 1000
ORDER BY P_TOTAL;




--실습문제 3장-5
SELECT EMPNO
     , ENAME
     , SAL
     , DEPTNO
     , JOB
     , RANK() OVER(PARTITION BY DEPTNO, JOB ORDER BY SAL DESC) RANK
FROM EMP;




--실습문제 3장-4
SELECT EMPNO
     , ENAME
     , SAL
     , DEPTNO
     , RANK() OVER(ORDER BY SAL DESC) RANK
FROM EMP
WHERE DEPTNO = 10
UNION ALL
SELECT EMPNO
     , ENAME
     , SAL
     , DEPTNO
     , RANK() OVER(ORDER BY SAL DESC) RANK
FROM EMP
WHERE DEPTNO = 20
UNION ALL
SELECT EMPNO
     , ENAME
     , SAL
     , DEPTNO
     , RANK() OVER(ORDER BY SAL DESC) RANK
FROM EMP
WHERE DEPTNO = 30;


SELECT EMPNO
     , ENAME
     , SAL
     , DEPTNO
     , RANK() OVER(PARTITION BY DEPTNO ORDER BY DEPTNO, SAL DESC) RANK
FROM EMP;




--실습문제 3장-3
--1)
SELECT DEPTNO
     , COUNT(DECODE(JOB, 'CLERK', 1)) "'CLERK'_COUNT"
     , SUM(DECODE(JOB, 'CLERK', SAL)) "'CLERK'_SUM"
     , COUNT(DECODE(JOB, 'MANAGER', 1)) "'CLERK'_COUNT"
     , SUM(DECODE(JOB, 'MANAGER', SAL)) "'CLERK'_SUM"
     , COUNT(DECODE(JOB, 'PRESIDENT', 1)) "'CLERK'_COUNT"
     , SUM(DECODE(JOB, 'PRESIDENT', SAL)) "'CLERK'_SUM"
     , COUNT(DECODE(JOB, 'ANALYST', 1)) "'CLERK'_COUNT"
     , SUM(DECODE(JOB, 'ANALYST', SAL)) "'CLERK'_SUM"
     , COUNT(DECODE(JOB, 'SALESMAN', 1)) "'CLERK'_COUNT"
     , SUM(DECODE(JOB, 'SALESMAN', SAL)) "'CLERK'_SUM"
FROM EMP
GROUP BY DEPTNO
ORDER BY DEPTNO;

--2)
SELECT * FROM(
    SELECT DEPTNO
         , JOB
         , EMPNO
         , SAL
    FROM EMP)
PIVOT(COUNT(EMPNO) AS COUNT, SUM(NVL(SAL, 0)) AS SUM
FOR JOB IN ('CLERK', 'MANAGER', 'PRESIDENT', 'ANALYST', 'SALESMAN'))
ORDER BY DEPTNO;




--실습문제 3장-2
--1)
SELECT DEPTNO
     , count(DECODE(JOB, 'CLERK', 1)) "CLERK"
     , count(DECODE(JOB, 'MANAGER', 1)) "MANAGER"
     , count(DECODE(JOB, 'PRESIDENT', 1)) "PRESIDENT"
     , count(DECODE(JOB, 'ANALYST', 1)) "ANALYST"
     , count(DECODE(JOB, 'SALESMAN', 1)) "SALESMAN"
FROM EMP
GROUP BY DEPTNO
ORDER BY DEPTNO;

--2)
SELECT DEPTNO
     , SUM(DECODE(JOB, 'CLERK', 1, 0)) "CLERK"
     , SUM(DECODE(JOB, 'MANAGER', 1, 0)) "MANAGER"
     , SUM(DECODE(JOB, 'PRESIDENT', 1, 0)) "PRESIDENT"
     , SUM(DECODE(JOB, 'ANALYST', 1, 0)) "ANALYST"
     , SUM(DECODE(JOB, 'SALESMAN', 1, 0)) "SALESMAN"
FROM EMP
GROUP BY DEPTNO
ORDER BY DEPTNO;

--3)
SELECT * FROM(
    SELECT DEPTNO
         , JOB
         , EMPNO
    FROM EMP)
PIVOT(COUNT(EMPNO) FOR JOB IN('CLERK', 'MANAGER', 'PRESIDENT', 'ANALYST', 'SALESMAN'))
ORDER BY DEPTNO;



--실습문제 3장-1
SELECT ASCII('29')
FROM DUAL;
SELECT ASCII('8')
FROM DUAL;
--1)
SELECT * FROM(
    SELECT WEEKNO
         , DAY
         , DAYNO
    FROM CAL)
-- ORACLE 버전 11G에서 추가 : PIVOT
PIVOT(MAX(DAYNO)FOR DAY IN('SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'))
ORDER BY WEEKNO;

--2)
SELECT MAX(DECODE(DAY, 'SUN', DAYNO)) "SUN",
       MAX(DECODE(DAY, 'MON', DAYNO)) "MON",
       MAX(DECODE(DAY, 'TUE', DAYNO)) "TUE",
       MAX(DECODE(DAY, 'WED', DAYNO)) "WED",
       MAX(DECODE(DAY, 'THU', DAYNO)) "THU",
       MAX(DECODE(DAY, 'FRI', DAYNO)) "FRI",
       MAX(DECODE(DAY, 'SAT', DAYNO)) "SAT"
FROM CAL
GROUP BY WEEKNO
ORDER BY WEEKNO;




--실습문제 AVG-1
SELECT POSITION
     , ROUND(AVG(PAY), 2) AVG
FROM PROFESSOR
GROUP BY POSITION
HAVING AVG(PAY) >= 300;




--실습문제 SUM-1
SELECT SUM(PAY) SUM
     , ROUND(AVG(PAY), 2)  A
     , MAX(PAY) X
     , MIN(PAY) N
     , ROUND(STDDEV(PAY), 2) S
     , ROUND(VARIANCE(PAY), 2) V
FROM PROFESSOR;



--실습문제 REPLACE-3
SELECT NAME
     , WEIGHT
     , JUMIN
     , REPLACE(JUMIN, SUBSTR(JUMIN, 7, 7), '*******') SECURE
FROM STUDENT
WHERE WEIGHT < 70;




--실습문제 SUBSTR,INSTSR -3
SELECT NAME
     , HPAGE
     , SUBSTR(HPAGE
            , INSTR(HPAGE, '/', 1, 2) + 1
            , INSTR(HPAGE, '.') - INSTR(HPAGE, '/', 1, 2) - 1) WWW
FROM PROFESSOR
WHERE HPAGE IS NOT NULL;



--실습문제 INSTR-3
SELECT NAME
     , POSITION
     , INSTR(POSITION, 'p') P
     , EMAIL
FROM PROFESSOR
WHERE EMAIL LIKE '%net';

SELECT NAME
     , POSITION
     , INSTR(POSITION, 'p') P
     , EMAIL
FROM PROFESSOR
WHERE SUBSTR(EMAIL
           , INSTR(EMAIL, '.') + 1
           , LENGTH(EMAIL)) = 'net';



--실습문제 SUBSTR-3
SELECT NAME
     , SUBSTR(JUMIN, 3, 2) MONTH
     , AN_KEY_DAP
FROM MEMBER
WHERE AN_KEY_DAP LIKE 'Ni%';

SELECT NAME
     , SUBSTR(JUMIN, 3, 2) MONTH
     , AN_KEY_DAP
FROM MEMBER
WHERE SUBSTR(AN_KEY_DAP,1, 2) = 'Ni';




--실습문제 CASE-2
SELECT GNAME
     , POINT
     , CASE WHEN POINT BETWEEN 1 AND 99999 THEN 'C'
            WHEN POINT BETWEEN 100000 AND 299999 THEN 'B'
            WHEN POINT BETWEEN 300000 AND 600000 THEN 'A'
            WHEN POINT > 600000 THEN 'S'
       END "CLASS"
FROM CUSTOMER
ORDER BY POINT DESC;



--실습문제 DECODE-2
SELECT NAME
     , HPAGE
     , DECODE(INSTR(HPAGE, '.') - INSTR(HPAGE, '/')
            , 5
            , REPLACE(HPAGE, SUBSTR(HPAGE, 8, 3), 'study')
            , REPLACE(HPAGE, SUBSTR(HPAGE, 8, 4), 'study'))
FROM PROFESSOR
WHERE HPAGE IS NOT NULL;

SELECT NAME
     , HPAGE
     , REPLACE(HPAGE
             , SUBSTR(HPAGE
                    , INSTR(HPAGE, '/', 1, 2) + 1
                    , INSTR(HPAGE, '.', 1, 1) - INSTR(HPAGE, '/', 1, 2) - 1)
             , 'study')
FROM PROFESSOR
WHERE HPAGE IS NOT NULL;