SELECT * FROM STUDENT2;
SELECT * FROM SUBJECT2;
SELECT * FROM SCORE2;

COMMIT;
-- 실패 => SCORE2 에서 SUTDENT2의 SU T_ID 와, SUBJECT2의 SUB_ID 를 참조받고 있으므로 삭제 불가
-- 성공 => SCORE2 테이블에서 CONSTRAINT 에서 ON DELETE 조건 추가함으로 써 튜플 삭제시 참조하는 테이블에서도 삭제
DELETE FROM STUDENT2;
DELETE FROM SUBJECT2;
DELETE FROM SCORE2;

-- 삽입 성공
INSERT INTO SCORE2 VALUES('A0000', 100, 100, 'A');
-- 학생 아이디 FK 위반
--INSERT INTO SCORE2 VALUES('A000', 100, 100, 'A');
-- 과목 아이디 FK 위반
--INSERT INTO SCORE2 VALUES('A000', 111, 100, 'A');
-- 학점 CHECK 제약조건 위반
--INSERT INTO SCORE2 VALUES('A000', 111, 100, 'G');


INSERT INTO SUBJECT2 VALUES(100, 'JAVA');

INSERT INTO STUDENT2 VALUES('A', 'ABC'); -- 글자수 5자 제한 때문에 안되야 하는데 자동 공백문자가 들어가 빈 공간 채움 => TRIM 사용
INSERT INTO STUDENT2 VALUES('A0', 'ABC'); -- 실패
INSERT INTO STUDENT2 VALUES('A00', 'ABC'); -- 실패
INSERT INTO STUDENT2 VALUES('A000', 'ABC'); -- 실패
INSERT INTO STUDENT2 VALUES('A0000', 'ABC'); -- 5자 이상이니 삽입 됨


SELECT * FROM SCORE2;

CREATE TABLE SCORE2(
      STU_ID CHAR(5) CONSTRAINT SCORE2_STU_ID_NN NOT NULL
    , SUB_ID NUMBER(3) CONSTRAINT SCORE2_SUB_ID_NN NOT NULL
    , SCORE NUMBER(3) CONSTRAINT SCORE2_SCORE_NN NOT NULL
    , GRADE CHAR(1) CONSTRAINT SCORE2_GRADE_CK CHECK(GRADE IN ('A', 'B', 'C', 'D', 'F'))
    , CONSTRAINT SCORE_PK PRIMARY KEY (STU_ID, SUB_ID)
    -- 학생 아이디는 학생 테이블의 학생 아이디와 동일하게 하기 위해서 FK 설정
--  , CONSTRAINT SCORE_FK1 FOREIGN KEY (STU_ID) REFERENCES STUDENT2(STU_ID)
    , CONSTRAINT SCORE_FK1 FOREIGN KEY (STU_ID) REFERENCES STUDENT2(STU_ID) ON DELETE CASCADE
    -- 과목 아이디는 과목 테이블의 과목 아이디와 동일하게 하기 위해서 FK 설정
--  , CONSTRAINT SCORE_FK2 FOREIGN KEY (SUB_ID) REFERENCES SUBJECT2(SUB_ID)
    , CONSTRAINT SCORE_FK2 FOREIGN KEY (SUB_ID) REFERENCES SUBJECT2(SUB_ID) ON DELETE CASCADE
);


SELECT * FROM STUDENT;

SELECT * FROM SUBJECT2;

CREATE TABLE SUBJECT2(
    -- 과목 아이디는 PK
      SUB_ID NUMBER(3) CONSTRAINT SUBJECT2_SUB_ID_PK PRIMARY KEY
    -- 과목 명은 필수 값
    , SUB_NAME VARCHAR2(10) CONSTRAINT SUBJECT2_SUB_NAME_NN NOT NULL
);


SELECT * FROM STUDENT2;

CREATE TABLE STUDENT2(
    -- 학생 아이디는 필수 값, 중복허용 X, 길이 5자
      STU_ID CHAR(5) CONSTRAINT STUDENT2_STU_ID_PK PRIMARY KEY
                     CONSTRAINT STUDENT2_STU_ID_CK CHECK(LENGTH(TRIM(' 'FROM STU_ID)) = 5)
    -- 학생 명은 필수 값
    , STU_NAME VARCHAR2(10) CONSTRAINT STUDENT2_STU_NAME_NN NOT NULL
);

DROP TABLE SCORE2;
DROP TABLE STUDENT2;
DROP TABLE SUBJECT2;




SELECT * FROM EMP_02;

-- 제약조건 삭제
ALTER TABLE EMP_02
DROP CONSTRAINT EMP_02_NAME_UK;

SELECT * FROM USER_CONS_COLUMNS
WHERE TABLE_NAME = 'EMP';

--USER_로 시작하는 데이터 사전 : 해당 계정(SCOTT)만 볼 수 있는 데이터 사전(SYS 권한 관리자 포함)
SELECT * FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'EMP';


-- 제약조건을 ENABLE 상태로 전환(전환전 제약조건을 위반하는 튜플 존재시 오류 발생)
ALTER TABLE T_NOVALIDATE2
ENABLE NOVALIDATE CONSTRAINT T_NOVALIDATE2_PK;

-- 제약조건의 삭제가 아닌 DISABLE 상태로 전환하는 것
ALTER TABLE T_NOVALIDATE2
DISABLE NOVALIDATE CONSTRAINT T_NOVALIDATE2_PK;

ALTER TABLE T_NOVALIDATE2
ADD CONSTRAINT T_NOVALIDATE2_PK PRIMARY KEY(NO);

DELETE FROM T_NOVALIDATE2 WHERE NAME = 'DDD';
INSERT INTO T_NOVALIDATE2 VALUES(1, 'DDD'); -- 얘는 들어감, 테이블 복사해도 제약조건은 복사 X

SELECT * FROM T_NOVALIDATE2;


CREATE TABLE T_NOVALIDATE2
AS
SELECT * FROM T_NOVALIDATE;

INSERT INTO T_NOVALIDATE VALUES(1, 'DDD');

SELECT * FROM T_NOVALIDATE;




-- 이름 속성에 동명이인이 없게 하는 제약조건 추가
ALTER TABLE EMP_02
ADD CONSTRAINT EMP_02_NAME_UK UNIQUE(NAME);

CREATE TABLE EMP_02(
       NO NUMBER(4) PRIMARY KEY
     , NAME VARCHAR2(20) NOT NULL
     , JUMIN VARCHAR2(13) NOT NULL UNIQUE
     , LOC_CODE NUMBER(1) CHECK(LOC_CODE < 5)
     , DEPTNO VARCHAR2(6) REFERENCES DEPT2(DCODE)
);

SELECT * FROM DEPT2;



-- 외부파일(exel)로 테이블 export, import
-- 좌측 탭에서 DEPT4 테이블 우클릭 EXPORT 누르고 형식 EXCEL, EXPORT 위치 설정 후 EXPORT
DELETE FROM DEPT4;
SELECT * FROM DEPT4;
-- 좌측 태벵서 DEPT4 테이블 우클릭 IMPORT 파일 선택 후 IMPORT

rollback;




DROP INDEX INDEX_EMP_01_ENAME;

CREATE INDEX INDEX_EMP_01_ENAME
ON EMP_01(ENAME);

-- 실행에 걸리는 시간
-- 0.004, 0.001, 0.000 (INDEX 생성 O)
-- 0.147, 0.096, 0.092 (INDEX 존재 X)
SELECT EMPNO, ENAME FROM EMP_01
WHERE ENAME = 'AAA';

INSERT INTO EMP_01(EMPNO, ENAME)
VALUES(111, 'AAA');

COMMIT;



INSERT INTO EMP_01
SELECT * FROM EMP_01;

-- 3145728(테이블 값 복사)
SELECT COUNT(*) FROM EMP_01;

-- 테이블 복사해도 인덱스는 복사되지 않음
CREATE TABLE EMP_01
AS
SELECT * FROM EMP;

SELECT ROWID, E.* FROM EMP E;
SELECT * FROM EMP;




-- TRUNCATE : 데이터 잘라내기
TRUNCATE TABLE DEPT7;   -- ROLLBACK 해도 복구 불가능
DELETE FROM DEPT7;      -- ROLLBACK 시 복구 가능

ROLLBACK;
SELECT * FROM DEPT7;




-- 조건에 해당하는 속성의 튜플들을 삭제
DELETE FROM DEPT2
WHERE DCODE >= 1000 AND DCODE <= 1004;

SELECT * FROM DEPT2;
ROLLBACK;




CREATE TABLE T_MINUS(
       NO1 NUMBER
     , NO2 NUMBER(3)    -- 정수만
     , NO3 NUMBER(3, 2) -- 소수점 2자리 까지만(3자리 이상인 경우 반올림), 정수부분은 1자리만
);

SELECT * FROM T_MINUS;

INSERT INTO T_MINUS VALUES(1, 1, 1);
INSERT INTO T_MINUS VALUES(1.1, 1.1, 1.1);
INSERT INTO T_MINUS VALUES(-1.1, -1.1, -1.1);
INSERT INTO T_MINUS VALUES(2.22, 2.22, 2.22);
INSERT INTO T_MINUS VALUES(2.222, 2.222, 2.222);
--INSERT INTO T_MINUS VALUES(22.22, 22.22, 22.22); -- 오류
--INSERT INTO T_MINUS VALUES(22.22, 22.22, 22); -- 오류
INSERT INTO T_MINUS VALUES(22.22, 22.22, 2);
INSERT INTO T_MINUS VALUES(5.555, 5.555, 5.555);
--INSERT INTO T_MINUS VALUES(777, 777, 777); -- 오류
INSERT INTO T_MINUS VALUES(777, 777, 7);
--INSERT INTO T_MINUS VALUES(8888, 8888, 8); -- 오류
INSERT INTO T_MINUS VALUES(8888, 888, 8);






-- 테이블의 특정 속성 제거
ALTER TABLE DEPT7 DROP COLUMN LOC;

SELECT * FROM DEPT7;




-- 속성의 데이터 크기 변경
ALTER TABLE DEPT7 MODIFY(LOC VARCHAR2(20));

DESC DEPT7;
SELECT * FROM DEPT7;




-- DEPT6 이름의 테이블을 DEPT7 으로 변경함
RENAME DEPT6 TO DEPT7;

SELECT * FROM DEPT7;





-- DEPT6 테이블의 LOCATION2 속성을 LOC 로 이름을 변경한다
ALTER TABLE DEPT6 RENAME COLUMN LOCATION2 TO LOC;

SELECT * FROM DEPT6;





-- TABLE 삭제하지 않고 속성만 추가(디폴트 값 지정)
ALTER TABLE DEPT6
ADD(LOCATION2 VARCHAR2(10) DEFAULT 'SEOUL');

SELECT * FROM DEPT6;




-- TABLE 삭제하지 않고 속성만 추가
ALTER TABLE DEPT6
ADD(LOCATION VARCHAR2(20));

SELECT * FROM DEPT6;




-- 속성 2개에 데이터 3개를 조건으로 골라 TABLE 생성
CREATE TABLE DEPT6
AS
SELECT DCODE, DNAME FROM DEPT2
WHERE DCODE IN(1000, 1001, 1002);

SELECT * FROM DEPT6;




-- TABLE의 구조만 가져오는 빈 TABLE을 만들기위해 FALSE 조건 작성
CREATE TABLE DEPT5
AS
SELECT * FROM DEPT2
WHERE 1 = 2;

SELECT * FROM DEPT5;




-- DEPT2 테이블 복사해서 DEPT3 생성
SELECT * FROM DEPT2;
CREATE TABLE DEPT3 AS SELECT * FROM DEPT2;

SELECT * FROM DEPT3;



SELECT * FROM DEPT3;
CREATE TABLE DEPT4 AS SELECT DCODE, DNAME FROM DEPT3;

SELECT * FROM DEPT4;




-----------------------------------------------------------------------




SELECT * FROM LOAN;
SELECT * FROM PROFESSOR;
SELECT * FROM EMP;
SELECT * FROM CUSTOMER;
-- 실습문제 4장-9
DROP TABLE NEW_EMP2;





-- 실습문제 4장-8
DELETE FROM NEW_EMP2;
TRUNCATE TABLE NEW_EMP2; -- ROLLBACK 불가

SELECT * FROM NEW_EMP2;
ROLLBACK;




-- 실습문제 5장-1
UPDATE PROFESSOR SET BONUS = 200 
WHERE POSITION = 'assistant professor';




-- 실습문제 4장-7
ALTER TABLE NEW_EMP2 DROP COLUMN BIRTH;

SELECT * FROM NEW_EMP2;




-- 실습문제 4장-6
DESC NEW_EMP2;
ALTER TABLE NEW_EMP2 MODIFY(EMPNO NUMBER(7));




-- 실습문제 4장-5
ALTER TABLE NEW_EMP2 RENAME COLUMN BIRTHDAY TO BIRTH;

SELECT * FROM NEW_EMP2;



-- 실습문제 4장-4
CREATE TABLE NEW_EMP3
AS
SELECT * FROM NEW_EMP2
WHERE 1 = 2;

SELECT * FROM NEW_EMP3;
DROP TABLE NEW_EMP3;




-- 실습문제 4장-3
ALTER TABLE NEW_EMP2
ADD(BIRTHDAY DATE DEFAULT SYSDATE);

SELECT * FROM NEW_EMP2;





-- 실습문제 4장-2
CREATE TABLE NEW_EMP2
AS
SELECT EMPNO, ENAME, HIREDATE FROM EMP;

SELECT * FROM NEW_EMP2;



-- 실습문제 4장-1
CREATE TABLE NEW_EMP(
    NO NUMBER(5)
  , NAME VARCHAR2(20)
  , HIREDATE DATE
  , BONUS NUMBER(6, 2)
);
SELECT * FROM NEW_EMP;



-- 실습문제 3장-Y3
SELECT GNAME
     , JUMIN
     , TO_CHAR(POINT, '999,999') POINT
     , TO_CHAR(SUM(POINT) OVER(PARTITION BY SUBSTR(JUMIN, 1, 2) ORDER BY POINT DESC), '9,999,999') TOTAL
     , ROUND(RATIO_TO_REPORT(SUM(POINT)) OVER(PARTITION BY SUBSTR(JUMIN, 1, 2)) * 100, 2) "RATIO(%)"
FROM CUSTOMER
GROUP BY GNAME
       , JUMIN
       , POINT;




-- 실습문제 3장-X5
SELECT NAME
     , BIRTHDAY
     , EMP_TYPE
     , TO_CHAR(PAY, '999,999,999') PAY
     , TO_CHAR(SUM(PAY) OVER(PARTITION BY EMP_TYPE ORDER BY PAY DESC), '999,999,999') TOTAL
FROM EMP2;





-- 실습문제 3장-X4
SELECT NAME
     , TEL
     , POSITION
     , TO_CHAR(PAY, '999,999,999') "PAY"
     , RANK() OVER(PARTITION BY SUBSTR(TEL, 1, INSTR(TEL, ')') - 1), POSITION ORDER BY PAY DESC) "RANK"
FROM EMP2;





-- 실습문제 3장-A13
SELECT DEPTNO
     , NAME
     , PAY
     , SUM(PAY) OVER(PARTITION BY DEPTNO) "TOTAL_DEPTNO"
     , ROUND(RATIO_TO_REPORT(SUM(PAY)) OVER(PARTITION BY DEPTNO) * 100, 2) "RATIO(%)"
FROM PROFESSOR
GROUP BY DEPTNO, NAME, PAY
ORDER BY 1;





-- 실습문제 3장-A13
SELECT DEPTNO
     , NAME
     , PAY
     , SUM(PAY) OVER() "TOTAL PAY"
     , ROUND(RATIO_TO_REPORT(SUM(PAY)) OVER() * 100, 2) "RATIO %"
FROM PROFESSOR
GROUP BY DEPTNO, NAME, PAY
ORDER BY 5 DESC;





-- 실습문제 3장-A12
SELECT L_DATE 대출일자
     , L_CODE 대출구분코드
     , L_QTY 대출건수
     , L_TOTAL 대출총액
     , SUM(L_TOTAL) OVER(PARTITION BY L_CODE ORDER BY L_TOTAL) 누적대출금액
FROM LOAN
WHERE L_STORE = 1000;


